// Code generated by MockGen. DO NOT EDIT.
// Source: hashid.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIDHasher is a mock of IDHasher interface.
type MockIDHasher struct {
	ctrl     *gomock.Controller
	recorder *MockIDHasherMockRecorder
}

// MockIDHasherMockRecorder is the mock recorder for MockIDHasher.
type MockIDHasherMockRecorder struct {
	mock *MockIDHasher
}

// NewMockIDHasher creates a new mock instance.
func NewMockIDHasher(ctrl *gomock.Controller) *MockIDHasher {
	mock := &MockIDHasher{ctrl: ctrl}
	mock.recorder = &MockIDHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDHasher) EXPECT() *MockIDHasherMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockIDHasher) Decode(hashed string) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", hashed)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockIDHasherMockRecorder) Decode(hashed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockIDHasher)(nil).Decode), hashed)
}

// DecodeUint64 mocks base method.
func (m *MockIDHasher) DecodeUint64(hashed string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeUint64", hashed)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeUint64 indicates an expected call of DecodeUint64.
func (mr *MockIDHasherMockRecorder) DecodeUint64(hashed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeUint64", reflect.TypeOf((*MockIDHasher)(nil).DecodeUint64), hashed)
}

// Encode mocks base method.
func (m *MockIDHasher) Encode(id uint32) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", id)
	ret0, _ := ret[0].(string)
	return ret0
}

// Encode indicates an expected call of Encode.
func (mr *MockIDHasherMockRecorder) Encode(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockIDHasher)(nil).Encode), id)
}

// EncodeUint64 mocks base method.
func (m *MockIDHasher) EncodeUint64(id uint64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeUint64", id)
	ret0, _ := ret[0].(string)
	return ret0
}

// EncodeUint64 indicates an expected call of EncodeUint64.
func (mr *MockIDHasherMockRecorder) EncodeUint64(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeUint64", reflect.TypeOf((*MockIDHasher)(nil).EncodeUint64), id)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: encoder.go

// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEncoder is a mock of Encoder interface.
type MockEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockEncoderMockRecorder
}

// MockEncoderMockRecorder is the mock recorder for MockEncoder.
type MockEncoderMockRecorder struct {
	mock *MockEncoder
}

// NewMockEncoder creates a new mock instance.
func NewMockEncoder(ctrl *gomock.Controller) *MockEncoder {
	mock := &MockEncoder{ctrl: ctrl}
	mock.recorder = &MockEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncoder) EXPECT() *MockEncoderMockRecorder {
	return m.recorder
}

// TransformToUTF8 mocks base method.
func (m *MockEncoder) TransformToUTF8(r io.Reader) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransformToUTF8", r)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransformToUTF8 indicates an expected call of TransformToUTF8.
func (mr *MockEncoderMockRecorder) TransformToUTF8(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransformToUTF8", reflect.TypeOf((*MockEncoder)(nil).TransformToUTF8), r)
}

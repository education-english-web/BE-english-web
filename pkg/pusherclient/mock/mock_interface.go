// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPusherClient is a mock of PusherClient interface.
type MockPusherClient struct {
	ctrl     *gomock.Controller
	recorder *MockPusherClientMockRecorder
}

// MockPusherClientMockRecorder is the mock recorder for MockPusherClient.
type MockPusherClientMockRecorder struct {
	mock *MockPusherClient
}

// NewMockPusherClient creates a new mock instance.
func NewMockPusherClient(ctrl *gomock.Controller) *MockPusherClient {
	mock := &MockPusherClient{ctrl: ctrl}
	mock.recorder = &MockPusherClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPusherClient) EXPECT() *MockPusherClientMockRecorder {
	return m.recorder
}

// AuthorizePrivateChannel mocks base method.
func (m *MockPusherClient) AuthorizePrivateChannel(params []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizePrivateChannel", params)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorizePrivateChannel indicates an expected call of AuthorizePrivateChannel.
func (mr *MockPusherClientMockRecorder) AuthorizePrivateChannel(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizePrivateChannel", reflect.TypeOf((*MockPusherClient)(nil).AuthorizePrivateChannel), params)
}

// Trigger mocks base method.
func (m *MockPusherClient) Trigger(channelID, event string, data map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trigger", channelID, event, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Trigger indicates an expected call of Trigger.
func (mr *MockPusherClientMockRecorder) Trigger(channelID, event, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trigger", reflect.TypeOf((*MockPusherClient)(nil).Trigger), channelID, event, data)
}

// TriggerMultiChannels mocks base method.
func (m *MockPusherClient) TriggerMultiChannels(channelIDs []string, event string, data map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerMultiChannels", channelIDs, event, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// TriggerMultiChannels indicates an expected call of TriggerMultiChannels.
func (mr *MockPusherClientMockRecorder) TriggerMultiChannels(channelIDs, event, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerMultiChannels", reflect.TypeOf((*MockPusherClient)(nil).TriggerMultiChannels), channelIDs, event, data)
}

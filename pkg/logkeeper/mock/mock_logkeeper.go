// Code generated by MockGen. DO NOT EDIT.
// Source: logkeeper.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockLogKeeper is a mock of LogKeeper interface.
type MockLogKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockLogKeeperMockRecorder
}

// MockLogKeeperMockRecorder is the mock recorder for MockLogKeeper.
type MockLogKeeperMockRecorder struct {
	mock *MockLogKeeper
}

// NewMockLogKeeper creates a new mock instance.
func NewMockLogKeeper(ctrl *gomock.Controller) *MockLogKeeper {
	mock := &MockLogKeeper{ctrl: ctrl}
	mock.recorder = &MockLogKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogKeeper) EXPECT() *MockLogKeeperMockRecorder {
	return m.recorder
}

// Push mocks base method.
func (m *MockLogKeeper) Push(message string, timestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", message, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockLogKeeperMockRecorder) Push(message, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockLogKeeper)(nil).Push), message, timestamp)
}

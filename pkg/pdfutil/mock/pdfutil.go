// Code generated by MockGen. DO NOT EDIT.
// Source: pdfutil.go

// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPDFFactory is a mock of PDFFactory interface.
type MockPDFFactory struct {
	ctrl     *gomock.Controller
	recorder *MockPDFFactoryMockRecorder
}

// MockPDFFactoryMockRecorder is the mock recorder for MockPDFFactory.
type MockPDFFactoryMockRecorder struct {
	mock *MockPDFFactory
}

// NewMockPDFFactory creates a new mock instance.
func NewMockPDFFactory(ctrl *gomock.Controller) *MockPDFFactory {
	mock := &MockPDFFactory{ctrl: ctrl}
	mock.recorder = &MockPDFFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPDFFactory) EXPECT() *MockPDFFactoryMockRecorder {
	return m.recorder
}

// AddCheckIcon mocks base method.
func (m *MockPDFFactory) AddCheckIcon(inFile string, page, posX, posY int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCheckIcon", inFile, page, posX, posY)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCheckIcon indicates an expected call of AddCheckIcon.
func (mr *MockPDFFactoryMockRecorder) AddCheckIcon(inFile, page, posX, posY interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCheckIcon", reflect.TypeOf((*MockPDFFactory)(nil).AddCheckIcon), inFile, page, posX, posY)
}

// AddCustomField mocks base method.
func (m *MockPDFFactory) AddCustomField(inFile, text string, page, posX, posY int, scale float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCustomField", inFile, text, page, posX, posY, scale)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCustomField indicates an expected call of AddCustomField.
func (mr *MockPDFFactoryMockRecorder) AddCustomField(inFile, text, page, posX, posY, scale interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCustomField", reflect.TypeOf((*MockPDFFactory)(nil).AddCustomField), inFile, text, page, posX, posY, scale)
}

// AddFooter mocks base method.
func (m *MockPDFFactory) AddFooter(inFile, text string, page int, scale float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFooter", inFile, text, page, scale)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFooter indicates an expected call of AddFooter.
func (mr *MockPDFFactoryMockRecorder) AddFooter(inFile, text, page, scale interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFooter", reflect.TypeOf((*MockPDFFactory)(nil).AddFooter), inFile, text, page, scale)
}

// AddImage mocks base method.
func (m *MockPDFFactory) AddImage(inFile, image string, page, posX, posY int, scale float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddImage", inFile, image, page, posX, posY, scale)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddImage indicates an expected call of AddImage.
func (mr *MockPDFFactoryMockRecorder) AddImage(inFile, image, page, posX, posY, scale interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddImage", reflect.TypeOf((*MockPDFFactory)(nil).AddImage), inFile, image, page, posX, posY, scale)
}

// AddImageFromReader mocks base method.
func (m *MockPDFFactory) AddImageFromReader(inFile string, image io.Reader, page, posX, posY int, relativeScale float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddImageFromReader", inFile, image, page, posX, posY, relativeScale)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddImageFromReader indicates an expected call of AddImageFromReader.
func (mr *MockPDFFactoryMockRecorder) AddImageFromReader(inFile, image, page, posX, posY, relativeScale interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddImageFromReader", reflect.TypeOf((*MockPDFFactory)(nil).AddImageFromReader), inFile, image, page, posX, posY, relativeScale)
}

// Dimensions mocks base method.
func (m *MockPDFFactory) Dimensions(inFile string) (float64, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dimensions", inFile)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Dimensions indicates an expected call of Dimensions.
func (mr *MockPDFFactoryMockRecorder) Dimensions(inFile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dimensions", reflect.TypeOf((*MockPDFFactory)(nil).Dimensions), inFile)
}

// ExtractPageNumber mocks base method.
func (m *MockPDFFactory) ExtractPageNumber(r io.Reader) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractPageNumber", r)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractPageNumber indicates an expected call of ExtractPageNumber.
func (mr *MockPDFFactoryMockRecorder) ExtractPageNumber(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractPageNumber", reflect.TypeOf((*MockPDFFactory)(nil).ExtractPageNumber), r)
}

// Validate mocks base method.
func (m *MockPDFFactory) Validate(r io.ReadSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockPDFFactoryMockRecorder) Validate(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockPDFFactory)(nil).Validate), r)
}

// MockPDFHelper is a mock of PDFHelper interface.
type MockPDFHelper struct {
	ctrl     *gomock.Controller
	recorder *MockPDFHelperMockRecorder
}

// MockPDFHelperMockRecorder is the mock recorder for MockPDFHelper.
type MockPDFHelperMockRecorder struct {
	mock *MockPDFHelper
}

// NewMockPDFHelper creates a new mock instance.
func NewMockPDFHelper(ctrl *gomock.Controller) *MockPDFHelper {
	mock := &MockPDFHelper{ctrl: ctrl}
	mock.recorder = &MockPDFHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPDFHelper) EXPECT() *MockPDFHelperMockRecorder {
	return m.recorder
}

// FontScale mocks base method.
func (m *MockPDFHelper) FontScale(width float64) float32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FontScale", width)
	ret0, _ := ret[0].(float32)
	return ret0
}

// FontScale indicates an expected call of FontScale.
func (mr *MockPDFHelperMockRecorder) FontScale(width interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FontScale", reflect.TypeOf((*MockPDFHelper)(nil).FontScale), width)
}

// FontScaleByFontSize mocks base method.
func (m *MockPDFHelper) FontScaleByFontSize(width, fontSize float64) float32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FontScaleByFontSize", width, fontSize)
	ret0, _ := ret[0].(float32)
	return ret0
}

// FontScaleByFontSize indicates an expected call of FontScaleByFontSize.
func (mr *MockPDFHelperMockRecorder) FontScaleByFontSize(width, fontSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FontScaleByFontSize", reflect.TypeOf((*MockPDFHelper)(nil).FontScaleByFontSize), width, fontSize)
}

// MarginScale mocks base method.
func (m *MockPDFHelper) MarginScale(width float64, posX, posY int, hasIconInFront bool) (int, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarginScale", width, posX, posY, hasIconInFront)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// MarginScale indicates an expected call of MarginScale.
func (mr *MockPDFHelperMockRecorder) MarginScale(width, posX, posY, hasIconInFront interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarginScale", reflect.TypeOf((*MockPDFHelper)(nil).MarginScale), width, posX, posY, hasIconInFront)
}

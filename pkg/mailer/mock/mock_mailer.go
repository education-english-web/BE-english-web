// Code generated by MockGen. DO NOT EDIT.
// Source: mailer.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	mailer "github.com/education-english-web/BE-english-web/pkg/mailer"
)

// MockMailer is a mock of Mailer interface.
type MockMailer struct {
	ctrl     *gomock.Controller
	recorder *MockMailerMockRecorder
}

// MockMailerMockRecorder is the mock recorder for MockMailer.
type MockMailerMockRecorder struct {
	mock *MockMailer
}

// NewMockMailer creates a new mock instance.
func NewMockMailer(ctrl *gomock.Controller) *MockMailer {
	mock := &MockMailer{ctrl: ctrl}
	mock.recorder = &MockMailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailer) EXPECT() *MockMailerMockRecorder {
	return m.recorder
}

// SendWithTemplate mocks base method.
func (m *MockMailer) SendWithTemplate(templateID string, recipients []mailer.Recipient, templateData mailer.EmailData, attachments ...mailer.Attachment) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{templateID, recipients, templateData}
	for _, a := range attachments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendWithTemplate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendWithTemplate indicates an expected call of SendWithTemplate.
func (mr *MockMailerMockRecorder) SendWithTemplate(templateID, recipients, templateData interface{}, attachments ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{templateID, recipients, templateData}, attachments...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWithTemplate", reflect.TypeOf((*MockMailer)(nil).SendWithTemplate), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: event.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	event "github.com/education-english-web/BE-english-web/pkg/notifier/event"
)

// MockEvent is a mock of Event interface.
type MockEvent struct {
	ctrl     *gomock.Controller
	recorder *MockEventMockRecorder
}

// MockEventMockRecorder is the mock recorder for MockEvent.
type MockEventMockRecorder struct {
	mock *MockEvent
}

// NewMockEvent creates a new mock instance.
func NewMockEvent(ctrl *gomock.Controller) *MockEvent {
	mock := &MockEvent{ctrl: ctrl}
	mock.recorder = &MockEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvent) EXPECT() *MockEventMockRecorder {
	return m.recorder
}

// BuildMessage mocks base method.
func (m *MockEvent) BuildMessage(payload map[string]interface{}) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildMessage", payload)
	ret0, _ := ret[0].(string)
	return ret0
}

// BuildMessage indicates an expected call of BuildMessage.
func (mr *MockEventMockRecorder) BuildMessage(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildMessage", reflect.TypeOf((*MockEvent)(nil).BuildMessage), payload)
}

// Channels mocks base method.
func (m *MockEvent) Channels() []event.Channel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Channels")
	ret0, _ := ret[0].([]event.Channel)
	return ret0
}

// Channels indicates an expected call of Channels.
func (mr *MockEventMockRecorder) Channels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channels", reflect.TypeOf((*MockEvent)(nil).Channels))
}

// Env mocks base method.
func (m *MockEvent) Env() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Env")
	ret0, _ := ret[0].(string)
	return ret0
}

// Env indicates an expected call of Env.
func (mr *MockEventMockRecorder) Env() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Env", reflect.TypeOf((*MockEvent)(nil).Env))
}

// Name mocks base method.
func (m *MockEvent) Name() event.Name {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(event.Name)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockEventMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockEvent)(nil).Name))
}

// Code generated by MockGen. DO NOT EDIT.
// Source: event_factory.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	event "github.com/education-english-web/BE-english-web/pkg/notifier/event"
)

// MockEventFactory is a mock of EventFactory interface.
type MockEventFactory struct {
	ctrl     *gomock.Controller
	recorder *MockEventFactoryMockRecorder
}

// MockEventFactoryMockRecorder is the mock recorder for MockEventFactory.
type MockEventFactoryMockRecorder struct {
	mock *MockEventFactory
}

// NewMockEventFactory creates a new mock instance.
func NewMockEventFactory(ctrl *gomock.Controller) *MockEventFactory {
	mock := &MockEventFactory{ctrl: ctrl}
	mock.recorder = &MockEventFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventFactory) EXPECT() *MockEventFactoryMockRecorder {
	return m.recorder
}

// GetEventByName mocks base method.
func (m *MockEventFactory) GetEventByName(name event.Name) event.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByName", name)
	ret0, _ := ret[0].(event.Event)
	return ret0
}

// GetEventByName indicates an expected call of GetEventByName.
func (mr *MockEventFactoryMockRecorder) GetEventByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByName", reflect.TypeOf((*MockEventFactory)(nil).GetEventByName), name)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AppendRows mocks base method.
func (m *MockClient) AppendRows(ctx context.Context, sheetName, rowRange string, records [][]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendRows", ctx, sheetName, rowRange, records)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendRows indicates an expected call of AppendRows.
func (mr *MockClientMockRecorder) AppendRows(ctx, sheetName, rowRange, records interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendRows", reflect.TypeOf((*MockClient)(nil).AppendRows), ctx, sheetName, rowRange, records)
}

// ClearSheet mocks base method.
func (m *MockClient) ClearSheet(ctx context.Context, sheetName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearSheet", ctx, sheetName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearSheet indicates an expected call of ClearSheet.
func (mr *MockClientMockRecorder) ClearSheet(ctx, sheetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearSheet", reflect.TypeOf((*MockClient)(nil).ClearSheet), ctx, sheetName)
}

// CreateSheet mocks base method.
func (m *MockClient) CreateSheet(ctx context.Context, sheetName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSheet", ctx, sheetName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSheet indicates an expected call of CreateSheet.
func (mr *MockClientMockRecorder) CreateSheet(ctx, sheetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSheet", reflect.TypeOf((*MockClient)(nil).CreateSheet), ctx, sheetName)
}

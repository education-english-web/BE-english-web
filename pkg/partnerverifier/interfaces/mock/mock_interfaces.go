// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSignatureVerifier is a mock of SignatureVerifier interface.
type MockSignatureVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockSignatureVerifierMockRecorder
}

// MockSignatureVerifierMockRecorder is the mock recorder for MockSignatureVerifier.
type MockSignatureVerifierMockRecorder struct {
	mock *MockSignatureVerifier
}

// NewMockSignatureVerifier creates a new mock instance.
func NewMockSignatureVerifier(ctrl *gomock.Controller) *MockSignatureVerifier {
	mock := &MockSignatureVerifier{ctrl: ctrl}
	mock.recorder = &MockSignatureVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignatureVerifier) EXPECT() *MockSignatureVerifierMockRecorder {
	return m.recorder
}

// Verify mocks base method.
func (m *MockSignatureVerifier) Verify(message, signature string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", message, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockSignatureVerifierMockRecorder) Verify(message, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockSignatureVerifier)(nil).Verify), message, signature)
}

// MockIPVerifier is a mock of IPVerifier interface.
type MockIPVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockIPVerifierMockRecorder
}

// MockIPVerifierMockRecorder is the mock recorder for MockIPVerifier.
type MockIPVerifierMockRecorder struct {
	mock *MockIPVerifier
}

// NewMockIPVerifier creates a new mock instance.
func NewMockIPVerifier(ctrl *gomock.Controller) *MockIPVerifier {
	mock := &MockIPVerifier{ctrl: ctrl}
	mock.recorder = &MockIPVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPVerifier) EXPECT() *MockIPVerifierMockRecorder {
	return m.recorder
}

// Verify mocks base method.
func (m *MockIPVerifier) Verify(ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockIPVerifierMockRecorder) Verify(ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockIPVerifier)(nil).Verify), ip)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHTTPFactory is a mock of HTTPFactory interface.
type MockHTTPFactory struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPFactoryMockRecorder
}

// MockHTTPFactoryMockRecorder is the mock recorder for MockHTTPFactory.
type MockHTTPFactoryMockRecorder struct {
	mock *MockHTTPFactory
}

// NewMockHTTPFactory creates a new mock instance.
func NewMockHTTPFactory(ctrl *gomock.Controller) *MockHTTPFactory {
	mock := &MockHTTPFactory{ctrl: ctrl}
	mock.recorder = &MockHTTPFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPFactory) EXPECT() *MockHTTPFactoryMockRecorder {
	return m.recorder
}

// GetIP mocks base method.
func (m *MockHTTPFactory) GetIP(r *http.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIP", r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIP indicates an expected call of GetIP.
func (mr *MockHTTPFactoryMockRecorder) GetIP(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIP", reflect.TypeOf((*MockHTTPFactory)(nil).GetIP), r)
}

// GetUserAgent mocks base method.
func (m *MockHTTPFactory) GetUserAgent(r *http.Request) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAgent", r)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserAgent indicates an expected call of GetUserAgent.
func (mr *MockHTTPFactoryMockRecorder) GetUserAgent(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAgent", reflect.TypeOf((*MockHTTPFactory)(nil).GetUserAgent), r)
}

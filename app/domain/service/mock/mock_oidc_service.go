// Code generated by MockGen. DO NOT EDIT.
// Source: oidc_service.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	oauth2 "golang.org/x/oauth2"

	service "github.com/education-english-web/BE-english-web/app/domain/service"
)

// MockOIDCService is a mock of OIDCService interface.
type MockOIDCService struct {
	ctrl     *gomock.Controller
	recorder *MockOIDCServiceMockRecorder
}

// MockOIDCServiceMockRecorder is the mock recorder for MockOIDCService.
type MockOIDCServiceMockRecorder struct {
	mock *MockOIDCService
}

// NewMockOIDCService creates a new mock instance.
func NewMockOIDCService(ctrl *gomock.Controller) *MockOIDCService {
	mock := &MockOIDCService{ctrl: ctrl}
	mock.recorder = &MockOIDCServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOIDCService) EXPECT() *MockOIDCServiceMockRecorder {
	return m.recorder
}

// GetClaims mocks base method.
func (m *MockOIDCService) GetClaims(token oauth2.Token, claims interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaims", token, claims)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetClaims indicates an expected call of GetClaims.
func (mr *MockOIDCServiceMockRecorder) GetClaims(token, claims interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaims", reflect.TypeOf((*MockOIDCService)(nil).GetClaims), token, claims)
}

// GetToken mocks base method.
func (m *MockOIDCService) GetToken(code, nonce, redirectURI string) (oauth2.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", code, nonce, redirectURI)
	ret0, _ := ret[0].(oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockOIDCServiceMockRecorder) GetToken(code, nonce, redirectURI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockOIDCService)(nil).GetToken), code, nonce, redirectURI)
}

// GetTokenFromJwtBearer mocks base method.
func (m *MockOIDCService) GetTokenFromJwtBearer(username string) (oauth2.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenFromJwtBearer", username)
	ret0, _ := ret[0].(oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenFromJwtBearer indicates an expected call of GetTokenFromJwtBearer.
func (mr *MockOIDCServiceMockRecorder) GetTokenFromJwtBearer(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenFromJwtBearer", reflect.TypeOf((*MockOIDCService)(nil).GetTokenFromJwtBearer), username)
}

// GetUserInfo mocks base method.
func (m *MockOIDCService) GetUserInfo(token oauth2.Token) (service.OAuth2UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", token)
	ret0, _ := ret[0].(service.OAuth2UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockOIDCServiceMockRecorder) GetUserInfo(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockOIDCService)(nil).GetUserInfo), token)
}

// RefreshToken mocks base method.
func (m *MockOIDCService) RefreshToken(token oauth2.Token) (oauth2.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", token)
	ret0, _ := ret[0].(oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockOIDCServiceMockRecorder) RefreshToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockOIDCService)(nil).RefreshToken), token)
}

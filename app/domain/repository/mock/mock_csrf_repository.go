// Code generated by MockGen. DO NOT EDIT.
// Source: csrf_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockCSRFRepository is a mock of CSRFRepository interface.
type MockCSRFRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCSRFRepositoryMockRecorder
}

// MockCSRFRepositoryMockRecorder is the mock recorder for MockCSRFRepository.
type MockCSRFRepositoryMockRecorder struct {
	mock *MockCSRFRepository
}

// NewMockCSRFRepository creates a new mock instance.
func NewMockCSRFRepository(ctrl *gomock.Controller) *MockCSRFRepository {
	mock := &MockCSRFRepository{ctrl: ctrl}
	mock.recorder = &MockCSRFRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSRFRepository) EXPECT() *MockCSRFRepositoryMockRecorder {
	return m.recorder
}

// DeleteAll mocks base method.
func (m *MockCSRFRepository) DeleteAll(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockCSRFRepositoryMockRecorder) DeleteAll(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockCSRFRepository)(nil).DeleteAll), ctx, userID)
}

// Get mocks base method.
func (m *MockCSRFRepository) Get(ctx context.Context, userID, uid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID, uid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCSRFRepositoryMockRecorder) Get(ctx, userID, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCSRFRepository)(nil).Get), ctx, userID, uid)
}

// Save mocks base method.
func (m *MockCSRFRepository) Save(ctx context.Context, userID, uid, value string, expiresAt time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, userID, uid, value, expiresAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockCSRFRepositoryMockRecorder) Save(ctx, userID, uid, value, expiresAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCSRFRepository)(nil).Save), ctx, userID, uid, value, expiresAt)
}

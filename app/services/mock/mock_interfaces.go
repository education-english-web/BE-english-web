// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	jwt "github.com/golang-jwt/jwt"
	gomock "github.com/golang/mock/gomock"
)

// MockJWT is a mock of JWT interface.
type MockJWT struct {
	ctrl     *gomock.Controller
	recorder *MockJWTMockRecorder
}

// MockJWTMockRecorder is the mock recorder for MockJWT.
type MockJWTMockRecorder struct {
	mock *MockJWT
}

// NewMockJWT creates a new mock instance.
func NewMockJWT(ctrl *gomock.Controller) *MockJWT {
	mock := &MockJWT{ctrl: ctrl}
	mock.recorder = &MockJWTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWT) EXPECT() *MockJWTMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockJWT) Decrypt(tokenStr string, claims jwt.Claims, skipClaimsValidation bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", tokenStr, claims, skipClaimsValidation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockJWTMockRecorder) Decrypt(tokenStr, claims, skipClaimsValidation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockJWT)(nil).Decrypt), tokenStr, claims, skipClaimsValidation)
}

// Encrypt mocks base method.
func (m *MockJWT) Encrypt(claims jwt.Claims) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockJWTMockRecorder) Encrypt(claims interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockJWT)(nil).Encrypt), claims)
}

// MockHashPass is a mock of HashPass interface.
type MockHashPass struct {
	ctrl     *gomock.Controller
	recorder *MockHashPassMockRecorder
}

// MockHashPassMockRecorder is the mock recorder for MockHashPass.
type MockHashPassMockRecorder struct {
	mock *MockHashPass
}

// NewMockHashPass creates a new mock instance.
func NewMockHashPass(ctrl *gomock.Controller) *MockHashPass {
	mock := &MockHashPass{ctrl: ctrl}
	mock.recorder = &MockHashPassMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHashPass) EXPECT() *MockHashPassMockRecorder {
	return m.recorder
}

// HashPassword mocks base method.
func (m *MockHashPass) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockHashPassMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockHashPass)(nil).HashPassword), password)
}

// VerifyPassword mocks base method.
func (m *MockHashPass) VerifyPassword(password, hash string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPassword", password, hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// VerifyPassword indicates an expected call of VerifyPassword.
func (mr *MockHashPassMockRecorder) VerifyPassword(password, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPassword", reflect.TypeOf((*MockHashPass)(nil).VerifyPassword), password, hash)
}
